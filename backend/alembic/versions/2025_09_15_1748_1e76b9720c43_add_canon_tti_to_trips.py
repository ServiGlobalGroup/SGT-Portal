"""add canon_tti to trips

Revision ID: 1e76b9720c43
Revises: 76b8226deea8
Create Date: 2025-09-15 17:48:57.758210

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1e76b9720c43'
down_revision: Union[str, None] = '76b8226deea8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_via_t_devices_created_by'), table_name='via_t_devices')
    op.drop_index(op.f('ix_via_t_devices_matricula'), table_name='via_t_devices')
    op.drop_index(op.f('ix_via_t_devices_numero_telepeaje'), table_name='via_t_devices')
    op.drop_index(op.f('ix_via_t_devices_pan'), table_name='via_t_devices')
    op.drop_table('via_t_devices')
    op.drop_index(op.f('ix_fuel_cards_created_by'), table_name='fuel_cards')
    op.drop_index(op.f('ix_fuel_cards_matricula'), table_name='fuel_cards')
    op.drop_index(op.f('ix_fuel_cards_pan'), table_name='fuel_cards')
    op.drop_table('fuel_cards')
    
    # Add canon_tti column as nullable first
    op.add_column('trips', sa.Column('canon_tti', sa.Boolean(), nullable=True, comment='Canon TTI'))
    
    # Update existing records to set default value
    op.execute("UPDATE trips SET canon_tti = false WHERE canon_tti IS NULL")
    
    # Now make it NOT NULL
    op.alter_column('trips', 'canon_tti', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('trips', 'canon_tti')
    op.create_table('fuel_cards',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pan', sa.VARCHAR(length=64), autoincrement=False, nullable=False, comment='PAN de la tarjeta (número enmascarable)'),
    sa.Column('matricula', sa.VARCHAR(length=16), autoincrement=False, nullable=False, comment='Matrícula asociada'),
    sa.Column('caducidad', sa.DATE(), autoincrement=False, nullable=True, comment='Fecha de caducidad de la tarjeta'),
    sa.Column('pin', sa.VARCHAR(length=32), autoincrement=False, nullable=False, comment='PIN de la tarjeta (considerar cifrado)'),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True, comment='Usuario que creó el registro'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Fecha de creación'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Última actualización'),
    sa.Column('compania', sa.VARCHAR(length=64), autoincrement=False, nullable=True, comment='Compañía emisora de la tarjeta'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fuel_cards_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('fuel_cards_pkey'))
    )
    op.create_index(op.f('ix_fuel_cards_pan'), 'fuel_cards', ['pan'], unique=False)
    op.create_index(op.f('ix_fuel_cards_matricula'), 'fuel_cards', ['matricula'], unique=False)
    op.create_index(op.f('ix_fuel_cards_created_by'), 'fuel_cards', ['created_by'], unique=False)
    op.create_table('via_t_devices',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('numero_telepeaje', sa.VARCHAR(length=64), autoincrement=False, nullable=False, comment='Número de telepeaje del dispositivo'),
    sa.Column('pan', sa.VARCHAR(length=64), autoincrement=False, nullable=False, comment='PAN asociado al dispositivo Via T'),
    sa.Column('compania', sa.VARCHAR(length=64), autoincrement=False, nullable=True, comment='Compañía emisora'),
    sa.Column('matricula', sa.VARCHAR(length=16), autoincrement=False, nullable=False, comment='Matrícula asociada'),
    sa.Column('caducidad', sa.DATE(), autoincrement=False, nullable=True, comment='Fecha de caducidad'),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True, comment='Usuario que creó el registro'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Fecha de creación'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Última actualización'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('via_t_devices_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('via_t_devices_pkey'))
    )
    op.create_index(op.f('ix_via_t_devices_pan'), 'via_t_devices', ['pan'], unique=False)
    op.create_index(op.f('ix_via_t_devices_numero_telepeaje'), 'via_t_devices', ['numero_telepeaje'], unique=False)
    op.create_index(op.f('ix_via_t_devices_matricula'), 'via_t_devices', ['matricula'], unique=False)
    op.create_index(op.f('ix_via_t_devices_created_by'), 'via_t_devices', ['created_by'], unique=False)
    # ### end Alembic commands ###

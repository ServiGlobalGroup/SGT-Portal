from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, Enum
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from app.database.connection import Base
import enum
import os
from datetime import datetime, timezone
from typing import Optional

class UserRole(enum.Enum):
    MASTER_ADMIN = "MASTER_ADMIN"  # Usuario maestro oculto
    ADMINISTRADOR = "ADMINISTRADOR"
    ADMINISTRACION = "ADMINISTRACION"
    TRAFICO = "TRAFICO"
    TRABAJADOR = "TRABAJADOR"

class MasterAdminUser:
    """
    Usuario maestro que existe √∫nicamente en el c√≥digo, no en la base de datos.
    Tiene acceso completo e ilimitado a todo el sistema.
    """
    def __init__(self, username: str, email: str, full_name: str):
        self.id = -1  # ID especial que nunca puede existir en la DB
        self.dni_nie = username  # Usamos el username como dni_nie
        self.first_name = "Admin"
        self.last_name = "System"
        self.email = "admin.system@serviglobal.com"  # Email v√°lido para evitar error de validaci√≥n
        self.phone = "+34000000001"
        self.role = UserRole.MASTER_ADMIN
        self.department = "IT"
        self.position = "Administrador de Sistema"
        self.hire_date = datetime.now(timezone.utc)
        self.birth_date = None
        self.address = "Oficina Central"
        self.city = "Madrid"
        self.postal_code = "28001"
        self.emergency_contact_name = None
        self.emergency_contact_phone = None
        self.is_active = True
        self.is_verified = True
        self.avatar = None
        self.user_folder_path = None
        self.created_at = datetime.now(timezone.utc)
        self.updated_at = datetime.now(timezone.utc)
        self.last_login = None  # Tipo datetime | None
        self.full_name = full_name
        self.initials = "AS"  # Admin System
    
    def __repr__(self):
        return f"<User(dni_nie='{self.dni_nie}', email='{self.email}', name='{self.full_name}')>"

class User(Base):
    """
    Modelo de usuario principal.
    Utiliza DNI/NIE como identificador √∫nico principal.
    """
    __tablename__ = "users"
    
    # Identificadores
    id = Column(Integer, primary_key=True, index=True)
    dni_nie = Column(String(20), unique=True, index=True, nullable=False, comment="DNI o NIE del usuario")
    
    # Datos personales
    first_name = Column(String(100), nullable=False, comment="Nombre")
    last_name = Column(String(100), nullable=False, comment="Apellidos")
    email = Column(String(255), unique=True, index=True, nullable=False, comment="Email corporativo")
    phone = Column(String(20), nullable=True, comment="Tel√©fono")
    
    # Datos profesionales
    role = Column(Enum(UserRole), nullable=False, default=UserRole.TRABAJADOR, comment="Rol en el sistema")
    department = Column(String(100), nullable=False, comment="Departamento")
    position = Column(String(100), nullable=True, comment="Puesto de trabajo")
    # Identificador de trabajador (solo relevante para rol TRABAJADOR): 'antiguo' | 'nuevo'
    worker_type = Column(String(10), nullable=False, server_default='antiguo', comment="Clasificaci√≥n del trabajador: antiguo/nuevo")
    
    # Fechas importantes
    hire_date = Column(DateTime, nullable=True, comment="Fecha de contrataci√≥n")
    birth_date = Column(DateTime, nullable=True, comment="Fecha de nacimiento")
    
    # Datos de contacto adicionales
    address = Column(Text, nullable=True, comment="Direcci√≥n completa")
    city = Column(String(100), nullable=True, comment="Ciudad")
    postal_code = Column(String(10), nullable=True, comment="C√≥digo postal")
    
    # Contacto de emergencia
    emergency_contact_name = Column(String(200), nullable=True, comment="Nombre contacto emergencia")
    emergency_contact_phone = Column(String(20), nullable=True, comment="Tel√©fono contacto emergencia")
    
    # Configuraci√≥n de cuenta
    hashed_password = Column(String(255), nullable=False, comment="Password hasheado")
    is_active = Column(Boolean, default=True, nullable=False, comment="Usuario activo")
    is_verified = Column(Boolean, default=False, nullable=False, comment="Email verificado")
    avatar = Column(String(255), nullable=True, comment="Ruta al avatar del usuario")
    
    # Configuraci√≥n de archivos
    user_folder_path = Column(String(500), nullable=True, comment="Ruta a la carpeta personal del usuario")
    
    # Metadatos
    created_at = Column(DateTime(timezone=True), server_default=func.now(), comment="Fecha de creaci√≥n")
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), comment="Fecha de √∫ltima actualizaci√≥n")
    last_login = Column(DateTime(timezone=True), nullable=True, comment="√öltimo inicio de sesi√≥n")
    # Forzar cambio de contrase√±a al primer inicio (o tras reseteo admin)
    must_change_password = Column(Boolean, nullable=False, server_default='0', comment="Debe cambiar contrase√±a en pr√≥ximo login")
    
    def __repr__(self):
        return f"<User(dni_nie='{self.dni_nie}', email='{self.email}', name='{self.first_name} {self.last_name}')>"
    @property
    def full_name(self):
        """Retorna el nombre completo del usuario"""
        return f"{self.first_name} {self.last_name}".strip()

    @property
    def initials(self):
        """Retorna las iniciales del usuario para el avatar"""
        first_initial = (self.first_name or '')[:1].upper()
        last_initial = (self.last_name or '')[:1].upper()
        return f"{first_initial}{last_initial}"
    
    def create_user_folder(self, base_path: str) -> str:
        """
        Crea la carpeta personal del usuario basada en su DNI/NIE.
        Estructura optimizada para conductores y personal de transporte.
        Retorna la ruta de la carpeta creada.
        """
        # Sanitizar el DNI/NIE para usar como nombre de carpeta
        folder_name = self.dni_nie.replace("/", "_").replace("\\", "_")
        user_folder = os.path.join(base_path, folder_name)
        
        # Crear las subcarpetas necesarias seg√∫n el rol del usuario
        base_folders = [
            user_folder,
            os.path.join(user_folder, "documentos_personales"),  # DNI, pasaporte, etc.
            os.path.join(user_folder, "nominas"),               # N√≥minas mensuales
            os.path.join(user_folder, "dietas"),                # Dietas de viaje
            os.path.join(user_folder, "contratos"),             # Contratos laborales
            os.path.join(user_folder, "vacaciones"),            # Solicitudes de vacaciones
            os.path.join(user_folder, "permisos"),              # Permisos y ausencias
        ]
        
        # Carpetas espec√≠ficas para conductores
        if self.role.name == 'TRABAJADOR':
            conductor_folders = [
                os.path.join(user_folder, "licencias_conducir"),    # Carnet de conducir
                os.path.join(user_folder, "formacion_conductor"),   # CAP, ADR, etc.
                os.path.join(user_folder, "certificados_medicos"), # Reconocimientos m√©dicos
                os.path.join(user_folder, "multas_infracciones"),  # Multas e infracciones
                os.path.join(user_folder, "tacografo"),            # Registros del tac√≥grafo
                os.path.join(user_folder, "vehiculos_asignados"),  # Documentaci√≥n veh√≠culos
            ]
            base_folders.extend(conductor_folders)
        
        # Carpetas espec√≠ficas para personal de tr√°fico
        elif self.role.name == 'TRAFICO':
            trafico_folders = [
                os.path.join(user_folder, "planificacion"),        # Planificaci√≥n de rutas
                os.path.join(user_folder, "documentos_carga"),     # CMR, albaranes, etc.
                os.path.join(user_folder, "clientes"),             # Documentaci√≥n clientes
            ]
            base_folders.extend(trafico_folders)
        
        # Carpetas espec√≠ficas para administradores
        elif self.role.name == 'ADMINISTRADOR':
            admin_folders = [
                os.path.join(user_folder, "reportes"),             # Reportes y an√°lisis
                os.path.join(user_folder, "configuracion"),       # Archivos de configuraci√≥n
                os.path.join(user_folder, "backups"),             # Copias de seguridad
            ]
            base_folders.extend(admin_folders)
        
        # Crear todas las carpetas
        for folder in base_folders:
            os.makedirs(folder, exist_ok=True)
        
        # Crear archivo README con informaci√≥n de la estructura
        readme_path = os.path.join(user_folder, "README.txt")
        try:
            with open(readme_path, "w", encoding="utf-8") as f:
                f.write(f"CARPETA PERSONAL - {self.first_name} {self.last_name}\n")
                f.write(f"DNI/NIE: {self.dni_nie}\n")
                f.write(f"Rol: {self.role.name}\n")
                f.write(f"Departamento: {self.department}\n")
                f.write(f"Creado: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n")
                f.write("ESTRUCTURA DE CARPETAS:\n")
                f.write("========================\n")
                
                # Documentar las carpetas creadas
                for folder in sorted(base_folders):
                    if folder != user_folder:  # Excluir la carpeta ra√≠z
                        subfolder_name = os.path.basename(folder)
                        f.write(f"üìÅ {subfolder_name}/\n")
                        
                        # A√±adir descripci√≥n de cada carpeta
                        descriptions = {
                            "documentos_personales": "  ‚Üí DNI, pasaporte, documentos de identidad",
                            "nominas": "  ‚Üí N√≥minas mensuales en formato PDF",
                            "dietas": "  ‚Üí Dietas de viaje y gastos",
                            "contratos": "  ‚Üí Contratos laborales y anexos",
                            "vacaciones": "  ‚Üí Solicitudes de vacaciones y permisos",
                            "permisos": "  ‚Üí Permisos m√©dicos, personales, etc.",
                            "licencias_conducir": "  ‚Üí Carnet de conducir y renovaciones",
                            "formacion_conductor": "  ‚Üí CAP, ADR, cursos de formaci√≥n",
                            "certificados_medicos": "  ‚Üí Reconocimientos m√©dicos obligatorios",
                            "multas_infracciones": "  ‚Üí Multas de tr√°fico e infracciones",
                            "tacografo": "  ‚Üí Registros y descargas del tac√≥grafo",
                            "vehiculos_asignados": "  ‚Üí ITV, seguros, fichas t√©cnicas",
                            "planificacion": "  ‚Üí Rutas, horarios, planificaci√≥n",
                            "documentos_carga": "  ‚Üí CMR, albaranes, documentos de carga",
                            "clientes": "  ‚Üí Contactos y documentos de clientes",
                            "reportes": "  ‚Üí Informes y an√°lisis administrativos",
                            "configuracion": "  ‚Üí Archivos de configuraci√≥n del sistema",
                            "backups": "  ‚Üí Copias de seguridad y respaldos"
                        }
                        
                        if subfolder_name in descriptions:
                            f.write(f"{descriptions[subfolder_name]}\n")
                        f.write("\n")
                
                f.write("\nNOTAS:\n")
                f.write("- Mant√©n los archivos organizados en sus carpetas correspondientes\n")
                f.write("- Los archivos PDF son preferibles para documentos oficiales\n")
                f.write("- Nombres de archivo descriptivos y con fecha cuando sea relevante\n")
                f.write("- No elimines este archivo README\n")
                
        except Exception as e:
            print(f"Error creando README para usuario {self.dni_nie}: {str(e)}")
        
        return user_folder

    def delete_user_folder(self, base_path: str) -> bool:
        """
        Elimina la carpeta personal del usuario y todo su contenido.
        Retorna True si se elimin√≥ correctamente, False en caso contrario.
        """
        import shutil
        
        # Construir la ruta de la carpeta del usuario
        folder_name = self.dni_nie.replace("/", "_").replace("\\", "_")
        user_folder = os.path.join(base_path, folder_name)
        
        try:
            if os.path.exists(user_folder):
                shutil.rmtree(user_folder)
                return True
            return True  # Si no existe, consideramos que ya est√° "eliminada"
        except Exception as e:
            print(f"Error eliminando carpeta del usuario {self.dni_nie}: {str(e)}")
            return False
    
    # Relaciones
    vacation_requests = relationship("VacationRequest", foreign_keys="VacationRequest.user_id", back_populates="user")

class UploadHistory(Base):
    """
    Modelo para el historial de subidas de documentos.
    Registra cada procesamiento de archivos PDF (n√≥minas/dietas).
    """
    __tablename__ = "upload_history"
    
    # Identificador
    id = Column(Integer, primary_key=True, index=True)
    
    # Informaci√≥n del archivo
    file_name = Column(String(255), nullable=False, comment="Nombre del archivo subido")
    upload_date = Column(DateTime, nullable=False, comment="Fecha y hora de subida")
    
    # Informaci√≥n del usuario
    user_dni = Column(String(20), nullable=False, index=True, comment="DNI/NIE del usuario que subi√≥")
    user_name = Column(String(200), nullable=False, comment="Nombre completo del usuario")
    
    # Informaci√≥n del documento
    document_type = Column(String(20), nullable=False, comment="Tipo de documento: nominas/dietas")
    month = Column(String(2), nullable=False, comment="Mes del documento")
    year = Column(String(4), nullable=False, comment="A√±o del documento")
    
    # Estad√≠sticas del procesamiento
    total_pages = Column(Integer, nullable=False, default=0, comment="Total de p√°ginas procesadas")
    successful_pages = Column(Integer, nullable=False, default=0, comment="P√°ginas procesadas exitosamente")
    failed_pages = Column(Integer, nullable=False, default=0, comment="P√°ginas que fallaron")
    
    # Estado del procesamiento
    status = Column(String(20), nullable=False, default="processing", comment="Estado: processing/completed/error")
    
    # Timestamps
    created_at = Column(DateTime, nullable=False, default=func.now(), comment="Fecha de creaci√≥n")
    updated_at = Column(DateTime, nullable=False, default=func.now(), onupdate=func.now(), comment="Fecha de actualizaci√≥n")
